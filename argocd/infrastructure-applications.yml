# ArgoCD Application Configurations for Infrastructure as Code Projects
# Implements GitOps for Terraform-based infrastructure deployments
# Advanced deployment strategies with multi-environment promotion

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: terraform-azure-infrastructure
  namespace: argocd
  labels:
    app: terraform-azure-infrastructure
    env: production
    tier: infrastructure
    component: iac
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: infrastructure-deployments
    notifications.argoproj.io/subscribe.on-sync-failed.slack: infrastructure-deployments
    notifications.argoproj.io/subscribe.on-health-degraded.pagerduty: platform-team
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: infrastructure
  
  # Source Configuration
  source:
    repoURL: https://github.com/olaitanojo/Terraform-azure-infrastructure.git
    targetRevision: HEAD
    path: environments/production
    
    # Plugin configuration for Terraform
    plugin:
      name: argocd-terraform-plugin
      env:
        - name: TF_VAR_environment
          value: production
        - name: TF_VAR_subscription_id
          value: "${AZURE_SUBSCRIPTION_ID}"
        - name: TF_VAR_tenant_id
          value: "${AZURE_TENANT_ID}"
        - name: TF_BACKEND_CONFIG
          value: |
            resource_group_name  = "terraform-state-rg"
            storage_account_name = "terraformstatestorage"
            container_name       = "tfstate"
            key                  = "production/terraform.tfstate"

  # Destination Configuration
  destination:
    server: https://kubernetes.default.svc
    namespace: terraform-prod
    
  # Sync Policy Configuration
  syncPolicy:
    # Manual sync for infrastructure changes
    automated:
      prune: false
      selfHeal: false
      allowEmpty: false
    
    # Sync options
    syncOptions:
      - Validate=true
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    
    # Retry configuration
    retry:
      limit: 3
      backoff:
        duration: 30s
        factor: 2
        maxDuration: 10m

  # Revision History
  revisionHistoryLimit: 5

---
# ArgoCD Application for Kubernetes Infrastructure
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kubernetes-infrastructure
  namespace: argocd
  labels:
    app: kubernetes-infrastructure
    env: production
    tier: infrastructure
    component: k8s
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: infrastructure-deployments
    notifications.argoproj.io/subscribe.on-sync-failed.slack: infrastructure-deployments
    notifications.argoproj.io/subscribe.on-health-degraded.pagerduty: platform-team
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: infrastructure
  
  # Source Configuration
  source:
    repoURL: https://github.com/olaitanojo/Kubernetes-infrastructure.git
    targetRevision: HEAD
    path: k8s/overlays/production
    
    # Kustomize Configuration
    kustomize:
      namePrefix: k8s-infra-
      nameSuffix: -prod
      commonLabels:
        app: kubernetes-infrastructure
        env: production
        managed-by: argocd
      commonAnnotations:
        argocd.argoproj.io/tracking-id: kubernetes-infrastructure:argoproj.io/Application:argocd/kubernetes-infrastructure

  # Destination Configuration
  destination:
    server: https://kubernetes.default.svc
    namespace: kube-system
    
  # Sync Policy Configuration
  syncPolicy:
    # Automated sync for Kubernetes resources
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    
    # Sync options
    syncOptions:
      - Validate=true
      - CreateNamespace=false  # Don't create kube-system
      - PrunePropagationPolicy=foreground
      - PruneLast=true
      - ServerSideApply=true
    
    # Retry configuration
    retry:
      limit: 5
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 5m

  # Revision History
  revisionHistoryLimit: 10

---
# ArgoCD Application for Istio Service Mesh
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: istio-service-mesh
  namespace: argocd
  labels:
    app: istio-service-mesh
    env: production
    tier: infrastructure
    component: service-mesh
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: infrastructure-deployments
    notifications.argoproj.io/subscribe.on-sync-failed.slack: infrastructure-deployments
    notifications.argoproj.io/subscribe.on-health-degraded.pagerduty: platform-team
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: infrastructure
  
  # Source Configuration
  source:
    repoURL: https://github.com/olaitanojo/Istio-service-mesh.git
    targetRevision: HEAD
    path: manifests/production
    
    # Kustomize Configuration
    kustomize:
      namePrefix: istio-
      nameSuffix: -prod
      commonLabels:
        app: istio-service-mesh
        env: production
        managed-by: argocd

  # Destination Configuration
  destination:
    server: https://kubernetes.default.svc
    namespace: istio-system
    
  # Sync Policy Configuration
  syncPolicy:
    # Automated sync with caution
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    
    # Sync options
    syncOptions:
      - Validate=true
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
      - ServerSideApply=true
    
    # Retry configuration
    retry:
      limit: 3
      backoff:
        duration: 60s
        factor: 2
        maxDuration: 10m

  # Revision History
  revisionHistoryLimit: 5

---
# ArgoCD AppProject for Infrastructure
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: infrastructure
  namespace: argocd
  labels:
    project: infrastructure
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  description: "Infrastructure as Code Projects with Advanced Deployment Strategies"
  
  # Source repositories allowed for this project
  sourceRepos:
    - 'https://github.com/olaitanojo/Terraform-azure-infrastructure.git'
    - 'https://github.com/olaitanojo/Kubernetes-infrastructure.git'
    - 'https://github.com/olaitanojo/Istio-service-mesh.git'
    - 'https://github.com/olaitanojo/Azure-kubernetes-cluster.git'
    - 'https://istio.io/charts'
    - 'https://kubernetes-sigs.github.io/aws-load-balancer-controller'
    - 'https://prometheus-community.github.io/helm-charts'
    - 'https://grafana.github.io/helm-charts'
  
  # Destination clusters and namespaces
  destinations:
    - namespace: 'terraform-*'
      server: https://kubernetes.default.svc
    - namespace: 'istio-system'
      server: https://kubernetes.default.svc
    - namespace: 'kube-system'
      server: https://kubernetes.default.svc
    - namespace: 'monitoring'
      server: https://kubernetes.default.svc
    - namespace: 'cert-manager'
      server: https://kubernetes.default.svc
    - namespace: 'ingress-nginx'
      server: https://kubernetes.default.svc
  
  # Cluster resource whitelist
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  
  # Namespace resource whitelist
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

  # RBAC roles for this project
  roles:
    - name: platform-admin
      description: "Platform admin access to infrastructure applications"
      policies:
        - p, proj:infrastructure:platform-admin, applications, *, infrastructure/*, allow
        - p, proj:infrastructure:platform-admin, repositories, *, *, allow
        - p, proj:infrastructure:platform-admin, certificates, *, *, allow
        - p, proj:infrastructure:platform-admin, clusters, *, *, allow
      groups:
        - platform-team
        - sre-team
    
    - name: infrastructure-developer
      description: "Developer access to infrastructure applications"
      policies:
        - p, proj:infrastructure:infrastructure-developer, applications, get, infrastructure/*, allow
        - p, proj:infrastructure:infrastructure-developer, applications, sync, infrastructure/*, deny
        - p, proj:infrastructure:infrastructure-developer, repositories, get, *, allow
        - p, proj:infrastructure:infrastructure-developer, logs, get, infrastructure/*, allow
      groups:
        - infrastructure-developers
    
    - name: readonly
      description: "Read-only access to infrastructure applications"
      policies:
        - p, proj:infrastructure:readonly, applications, get, infrastructure/*, allow
        - p, proj:infrastructure:readonly, repositories, get, *, allow
        - p, proj:infrastructure:readonly, logs, get, infrastructure/*, allow
      groups:
        - infrastructure-viewers
        - auditors

  # Sync windows (very restrictive for infrastructure)
  syncWindows:
    - kind: allow
      schedule: '0 10-16 * * 2-4'  # Tue-Thu, 10AM-4PM
      duration: 6h
      applications:
        - '*'
      manualSync: true
    - kind: deny
      schedule: '0 0-23 * * 1,5,6,0'  # Mon, Fri, Weekends
      duration: 24h
      applications:
        - '*'
      manualSync: false

---
# ArgoCD Application for Monitoring Stack
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring-stack
  namespace: argocd
  labels:
    app: monitoring-stack
    env: production
    tier: observability
    component: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: monitoring-deployments
    notifications.argoproj.io/subscribe.on-sync-failed.slack: monitoring-deployments
    notifications.argoproj.io/subscribe.on-health-degraded.pagerduty: sre-team
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: infrastructure
  
  # Source Configuration
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: "45.7.1"
    chart: kube-prometheus-stack
    
    # Helm values
    helm:
      values: |
        prometheus:
          prometheusSpec:
            retention: 30d
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: fast-ssd
                  resources:
                    requests:
                      storage: 100Gi
            serviceMonitorSelectorNilUsesHelmValues: false
            ruleSelectorNilUsesHelmValues: false
            podMonitorSelectorNilUsesHelmValues: false
            probeSelectorNilUsesHelmValues: false
        
        grafana:
          adminPassword: "${GRAFANA_ADMIN_PASSWORD}"
          persistence:
            enabled: true
            storageClassName: fast-ssd
            size: 10Gi
          ingress:
            enabled: true
            ingressClassName: nginx
            hosts:
              - grafana.example.com
            tls:
              - secretName: grafana-tls
                hosts:
                  - grafana.example.com
        
        alertmanager:
          alertmanagerSpec:
            storage:
              volumeClaimTemplate:
                spec:
                  storageClassName: fast-ssd
                  resources:
                    requests:
                      storage: 10Gi

  # Destination Configuration
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
    
  # Sync Policy Configuration
  syncPolicy:
    # Automated sync for monitoring stack
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    
    # Sync options
    syncOptions:
      - Validate=false
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
      - ServerSideApply=true
    
    # Retry configuration
    retry:
      limit: 5
      backoff:
        duration: 30s
        factor: 2
        maxDuration: 10m

  # Revision History
  revisionHistoryLimit: 5

---
# ArgoCD Application for ArgoCD itself (App of Apps pattern)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd-config
  namespace: argocd
  labels:
    app: argocd-config
    env: production
    tier: gitops
    component: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: gitops-deployments
    notifications.argoproj.io/subscribe.on-sync-failed.slack: gitops-deployments
    notifications.argoproj.io/subscribe.on-health-degraded.pagerduty: platform-team
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: infrastructure
  
  # Source Configuration
  source:
    repoURL: https://argoproj.github.io/argo-helm
    targetRevision: "5.46.8"
    chart: argo-cd
    
    # Helm values for ArgoCD configuration
    helm:
      values: |
        global:
          image:
            tag: v2.8.4
        
        dex:
          enabled: false
        
        server:
          replicas: 2
          autoscaling:
            enabled: true
            minReplicas: 2
            maxReplicas: 5
          ingress:
            enabled: true
            ingressClassName: nginx
            hosts:
              - argocd.example.com
            tls:
              - secretName: argocd-server-tls
                hosts:
                  - argocd.example.com
          config:
            url: https://argocd.example.com
            oidc.config: |
              name: Azure AD
              issuer: https://login.microsoftonline.com/${AZURE_TENANT_ID}/v2.0
              clientId: ${AZURE_CLIENT_ID}
              clientSecret: ${AZURE_CLIENT_SECRET}
              requestedScopes: ["openid", "profile", "email"]
              requestedIDTokenClaims: {"groups": {"essential": true}}
        
        controller:
          replicas: 2
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
        
        repoServer:
          replicas: 2
          autoscaling:
            enabled: true
            minReplicas: 2
            maxReplicas: 5
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
        
        applicationSet:
          enabled: true
          replicas: 2
        
        notifications:
          enabled: true
          argocdUrl: https://argocd.example.com
          secret:
            create: false
            name: argocd-notifications-secret

  # Destination Configuration
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
    
  # Sync Policy Configuration
  syncPolicy:
    # Manual sync for ArgoCD itself
    automated:
      prune: false
      selfHeal: false
      allowEmpty: false
    
    # Sync options
    syncOptions:
      - Validate=true
      - CreateNamespace=false  # ArgoCD namespace already exists
      - PrunePropagationPolicy=foreground
      - PruneLast=true
      - ServerSideApply=true
    
    # Retry configuration
    retry:
      limit: 3
      backoff:
        duration: 60s
        factor: 2
        maxDuration: 10m

  # Revision History
  revisionHistoryLimit: 3

---
# ArgoCD ApplicationSet for multi-environment deployment
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: terraform-environments
  namespace: argocd
  labels:
    app: terraform-environments
spec:
  generators:
    - list:
        elements:
          - environment: development
            namespace: terraform-dev
            revision: develop
            syncPolicy: automated
            syncWave: "1"
            replicaCount: 1
          - environment: staging
            namespace: terraform-staging
            revision: staging
            syncPolicy: manual
            syncWave: "2"
            replicaCount: 2
          - environment: production
            namespace: terraform-prod
            revision: main
            syncPolicy: manual
            syncWave: "3"
            replicaCount: 3
  
  template:
    metadata:
      name: 'terraform-{{environment}}'
      labels:
        app: terraform-infrastructure
        env: '{{environment}}'
      annotations:
        argocd.argoproj.io/sync-wave: '{{syncWave}}'
    spec:
      project: infrastructure
      source:
        repoURL: https://github.com/olaitanojo/Terraform-azure-infrastructure.git
        targetRevision: '{{revision}}'
        path: 'environments/{{environment}}'
        plugin:
          name: argocd-terraform-plugin
          env:
            - name: TF_VAR_environment
              value: '{{environment}}'
            - name: TF_VAR_replica_count
              value: '{{replicaCount}}'
      destination:
        server: https://kubernetes.default.svc
        namespace: '{{namespace}}'
      syncPolicy:
        automated:
          prune: '{{#if (eq syncPolicy "automated")}}true{{else}}false{{/if}}'
          selfHeal: '{{#if (eq syncPolicy "automated")}}true{{else}}false{{/if}}'
        syncOptions:
          - CreateNamespace=true
          - Validate=true
        retry:
          limit: 3
          backoff:
            duration: 30s
            factor: 2
            maxDuration: 5m

---
# ArgoCD Rollout for Infrastructure Changes
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: infrastructure-rollout
  namespace: terraform-prod
  labels:
    app: terraform-infrastructure
    env: production
    tier: infrastructure
  annotations:
    rollout.argoproj.io/revision: "1"
spec:
  replicas: 1  # Infrastructure typically runs single instances
  
  # Rollout strategy for infrastructure
  strategy:
    canary:
      # Maximum unavailable during rollout
      maxUnavailable: 0
      maxSurge: "100%"
      
      # Canary steps for infrastructure validation
      steps:
        # Step 1: Deploy and validate infrastructure
        - setWeight: 100
        - pause:
            duration: 5m
        
        # Step 2: Run comprehensive infrastructure tests
        - analysis:
            templates:
              - templateName: infrastructure-health-check
              - templateName: infrastructure-compliance-check
            args:
              - name: namespace
                value: terraform-prod
              - name: environment
                value: production
        
        # Step 3: Final validation and promotion
        - pause:
            duration: 10m
  
  # Rollout selector
  selector:
    matchLabels:
      app: terraform-infrastructure
      tier: infrastructure
  
  # Pod template for infrastructure management
  template:
    metadata:
      labels:
        app: terraform-infrastructure
        tier: infrastructure
        env: production
    spec:
      serviceAccountName: terraform-runner
      
      containers:
        - name: terraform-runner
          image: hashicorp/terraform:1.5.7
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "Infrastructure deployment completed"
              # Keep container running for monitoring
              tail -f /dev/null
          
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: TF_IN_AUTOMATION
              value: "true"

---
# Analysis Template for Infrastructure Health Check
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: infrastructure-health-check
  namespace: terraform-prod
  labels:
    app: terraform-infrastructure
spec:
  metrics:
    - name: cluster-health
      initialDelay: 30s
      interval: 30s
      count: 5
      successCondition: result[0] == 1
      failureLimit: 2
      provider:
        prometheus:
          address: http://prometheus.monitoring.svc.cluster.local:9090
          query: |
            up{job="kubernetes-nodes"}
    
    - name: resource-utilization
      initialDelay: 60s
      interval: 60s
      count: 3
      successCondition: result[0] < 0.8
      failureLimit: 2
      provider:
        prometheus:
          address: http://prometheus.monitoring.svc.cluster.local:9090
          query: |
            (1 - avg(rate(node_cpu_seconds_total{mode="idle"}[5m])))
  args:
    - name: namespace
    - name: environment

---
# Analysis Template for Infrastructure Compliance Check
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: infrastructure-compliance-check
  namespace: terraform-prod
  labels:
    app: terraform-infrastructure
spec:
  metrics:
    - name: compliance-score
      initialDelay: 120s
      interval: 180s
      count: 2
      successCondition: result[0] >= 0.9
      failureLimit: 1
      provider:
        job:
          spec:
            template:
              spec:
                containers:
                  - name: compliance-check
                    image: aquasec/trivy:latest
                    command: ["/bin/sh"]
                    args:
                      - -c
                      - |
                        # Run compliance checks
                        trivy k8s --report summary all
                        # Return compliance score (0.0-1.0)
                        echo "0.95"
                restartPolicy: Never
                backoffLimit: 2
  args:
    - name: namespace
    - name: environment
