name: SPX Options Trading Bot CI/CD

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - blue-green
          - rolling

env:
  REGISTRY: spxoptionsregistry.azurecr.io
  IMAGE_NAME: spx-options-trading-bot
  PYTHON_VERSION: '3.9'

jobs:
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      deployment_strategy: ${{ steps.set-strategy.outputs.strategy }}
      should_deploy: ${{ steps.set-deploy.outputs.should_deploy }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Set Deployment Strategy
        id: set-strategy
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "strategy=${{ github.event.inputs.deployment_strategy }}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.set-env.outputs.environment }}" == "production" ]]; then
            echo "strategy=canary" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.set-env.outputs.environment }}" == "staging" ]]; then
            echo "strategy=blue-green" >> $GITHUB_OUTPUT
          else
            echo "strategy=rolling" >> $GITHUB_OUTPUT
          fi

      - name: Set Deployment Flag
        id: set-deploy
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Code Formatting Check
        run: |
          black --check --diff .
          isort --check-only --diff .

      - name: Linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type Checking
        run: mypy . --ignore-missing-imports

      - name: Security Analysis
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, performance]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-mock
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --junitxml=junit-unit.xml

      - name: Run Integration Tests
        if: matrix.test-type == 'integration'
        run: |
          pytest tests/integration/ -v --junitxml=junit-integration.xml

      - name: Run Performance Tests
        if: matrix.test-type == 'performance'
        run: |
          pytest tests/performance/ -v --junitxml=junit-performance.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            junit-*.xml
            htmlcov/
            coverage.xml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk Security Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=requirements.txt

  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [setup, code-quality, test, security-scan]
    if: needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Container Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ steps.meta.outputs.labels }}

      - name: Scan Container Image
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --format sarif --output container-scan.sarif \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Upload Container Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: container-scan-results
          path: container-scan.sarif

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [setup, build-and-push]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.get-url.outputs.app_url }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy with Canary Strategy
        if: needs.setup.outputs.deployment_strategy == 'canary'
        run: |
          echo "Deploying with Canary strategy..."
          # Update image tag in Kubernetes manifests
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" k8s/base/deployment.yaml
          
          # Apply Argo Rollout for canary deployment
          kubectl apply -f k8s/overlays/${{ needs.setup.outputs.environment }}/
          
          # Wait for rollout to start
          kubectl argo rollouts get rollout spx-options-trading-bot -n spx-options-${{ needs.setup.outputs.environment }} -w

      - name: Deploy with Blue-Green Strategy
        if: needs.setup.outputs.deployment_strategy == 'blue-green'
        run: |
          echo "Deploying with Blue-Green strategy..."
          # Update image tag
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" k8s/base/deployment.yaml
          
          # Apply blue-green deployment
          kubectl apply -f k8s/overlays/${{ needs.setup.outputs.environment }}/
          
          # Promote after validation (manual gate in production)
          if [[ "${{ needs.setup.outputs.environment }}" != "production" ]]; then
            sleep 300  # Wait 5 minutes for validation
            kubectl argo rollouts promote spx-options-trading-bot -n spx-options-${{ needs.setup.outputs.environment }}
          fi

      - name: Deploy with Rolling Strategy
        if: needs.setup.outputs.deployment_strategy == 'rolling'
        run: |
          echo "Deploying with Rolling Update strategy..."
          kubectl set image deployment/spx-options-trading-bot \
            spx-options-trading-bot=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n spx-options-${{ needs.setup.outputs.environment }}
          
          kubectl rollout status deployment/spx-options-trading-bot -n spx-options-${{ needs.setup.outputs.environment }}

      - name: Run Post-Deployment Tests
        run: |
          echo "Running post-deployment validation..."
          # Health check
          kubectl get pods -n spx-options-${{ needs.setup.outputs.environment }}
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=spx-options-trading-bot -n spx-options-${{ needs.setup.outputs.environment }} --timeout=300s
          
          # Run smoke tests
          python scripts/smoke_tests.py --environment ${{ needs.setup.outputs.environment }}

      - name: Get Application URL
        id: get-url
        run: |
          APP_URL=$(kubectl get ingress spx-options-trading-bot -n spx-options-${{ needs.setup.outputs.environment }} -o jsonpath='{.spec.rules[0].host}')
          echo "app_url=https://$APP_URL" >> $GITHUB_OUTPUT

      - name: Update Feature Flags
        if: needs.setup.outputs.environment == 'production'
        run: |
          echo "Updating feature flags for production deployment..."
          # Enable new features gradually
          python scripts/update_feature_flags.py --environment production --deployment-id ${{ github.sha }}

  monitoring:
    name: Update Monitoring
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.setup.outputs.should_deploy == 'true' && always() && needs.deploy.result == 'success'
    
    steps:
      - name: Update Grafana Dashboards
        run: |
          echo "Updating Grafana dashboards..."
          curl -X POST "${{ secrets.GRAFANA_URL }}/api/dashboards/db" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/grafana/spx-options-dashboard.json

      - name: Create Deployment Event
        run: |
          echo "Creating deployment event in monitoring..."
          curl -X POST "${{ secrets.PROMETHEUS_PUSHGATEWAY_URL }}/metrics/job/github-actions" \
            -d "deployment_info{environment=\"${{ needs.setup.outputs.environment }}\",strategy=\"${{ needs.setup.outputs.deployment_strategy }}\",commit=\"${{ github.sha }}\"} 1"

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: always() && needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: Notify Slack on Success
        if: needs.deploy.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#spx-deployments'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on Failure
        if: needs.deploy.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#spx-deployments'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub Issue on Failure
        if: needs.deploy.result == 'failure' && needs.setup.outputs.environment == 'production'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Production Deployment Failed - ${context.sha}`,
              body: `Production deployment failed for commit ${context.sha}.\n\nPlease investigate and resolve the issues.\n\n**Environment:** ${{ needs.setup.outputs.environment }}\n**Strategy:** ${{ needs.setup.outputs.deployment_strategy }}\n**Workflow:** ${context.workflow}\n**Run ID:** ${context.runId}`,
              labels: ['bug', 'production', 'deployment']
            });

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: failure() && needs.setup.outputs.environment == 'production' && needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Rollback Deployment
        run: |
          echo "Rolling back production deployment..."
          if [[ "${{ needs.setup.outputs.deployment_strategy }}" == "canary" || "${{ needs.setup.outputs.deployment_strategy }}" == "blue-green" ]]; then
            kubectl argo rollouts abort spx-options-trading-bot -n spx-options-production
            kubectl argo rollouts undo spx-options-trading-bot -n spx-options-production
          else
            kubectl rollout undo deployment/spx-options-trading-bot -n spx-options-production
          fi

      - name: Verify Rollback
        run: |
          kubectl rollout status deployment/spx-options-trading-bot -n spx-options-production
          kubectl get pods -n spx-options-production

      - name: Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              channel: '#spx-deployments',
              attachments: [{
                color: 'warning',
                title: 'Production Rollback Completed',
                text: `Rollback completed for SPX Options Trading Bot.\n\nCommit: ${process.env.AS_COMMIT}\nEnvironment: production\nStrategy: ${{ needs.setup.outputs.deployment_strategy }}`,
                footer: 'GitHub Actions',
                ts: Math.floor(Date.now() / 1000)
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
