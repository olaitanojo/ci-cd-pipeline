# GitLab CI/CD Pipeline for SPX Options Trading Bot
# Advanced Deployment Strategies: Blue-Green, Canary, Rolling Updates, Feature Flags, Multi-Environment
# Complete CI/CD pipeline with zero-downtime deployments

# =============================================================================
# GLOBAL CONFIGURATION
# =============================================================================

stages:
  - setup
  - code-quality
  - test
  - security-scan
  - build
  - deploy-dev
  - deploy-staging
  - deploy-production
  - post-validation
  - monitoring-update
  - chaos-engineering
  - notification
  - rollback

variables:
  # Docker Configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY_URL: spxoptionsregistry.azurecr.io
  IMAGE_NAME: spx-options-trading-bot
  
  # Python Configuration
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  
  # Feature Flags
  FEATURE_FLAG_SERVICE: https://feature-flags.spxoptions.com
  
  # Environment Namespaces
  DEV_NAMESPACE: spx-options-dev
  STAGING_NAMESPACE: spx-options-staging
  PROD_NAMESPACE: spx-options-prod
  
  # Build Metadata
  BUILD_VERSION: "$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}"

# =============================================================================
# GLOBAL SETTINGS
# =============================================================================

default:
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl wget
    - python --version
    - pip install --upgrade pip

cache:
  paths:
    - .cache/pip
    - node_modules/
    - .sonar/cache

# =============================================================================
# SETUP AND METADATA
# =============================================================================

setup:metadata:
  stage: setup
  script:
    - |
      # Determine deployment target and strategy based on branch
      if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
        echo "TARGET_ENV=production" >> deploy.env
        echo "DEPLOYMENT_STRATEGY=canary" >> deploy.env
        echo "SHOULD_DEPLOY=true" >> deploy.env
      elif [[ "$CI_COMMIT_REF_NAME" == "develop" ]]; then
        echo "TARGET_ENV=staging" >> deploy.env
        echo "DEPLOYMENT_STRATEGY=blue-green" >> deploy.env
        echo "SHOULD_DEPLOY=true" >> deploy.env
      else
        echo "TARGET_ENV=dev" >> deploy.env
        echo "DEPLOYMENT_STRATEGY=rolling" >> deploy.env
        echo "SHOULD_DEPLOY=false" >> deploy.env
      fi
      
      echo "BUILD_VERSION=$BUILD_VERSION" >> deploy.env
      echo "FULL_IMAGE_NAME=$REGISTRY_URL/$IMAGE_NAME:$BUILD_VERSION" >> deploy.env
      
      # Display build information
      echo "üöÄ Build Version: $BUILD_VERSION"
      cat deploy.env
  artifacts:
    reports:
      dotenv: deploy.env
    expire_in: 1 day
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"

# =============================================================================
# CODE QUALITY ANALYSIS
# =============================================================================

code-quality:lint:
  stage: code-quality
  needs: ["setup:metadata"]
  script:
    - pip install black flake8 mypy pylint bandit safety
    - pip install -r requirements.txt
    
    # Code formatting check
    - echo "üîç Checking code formatting with Black..."
    - black --check --diff .
    
    # Linting with flake8
    - echo "üîç Running flake8 linting..."
    - flake8 . --max-line-length=88 --extend-ignore=E203,W503 --statistics --tee --output-file=flake8-report.txt
    
    # Type checking with mypy
    - echo "üîç Running mypy type checking..."
    - mypy . --ignore-missing-imports --strict-optional --json-report mypy-report --txt-report mypy-txt-report
    
    # Advanced linting with pylint
    - echo "üîç Running pylint analysis..."
    - pylint --rcfile=.pylintrc src/ --output-format=json:pylint-report.json,colorized || true
  artifacts:
    reports:
      codequality: pylint-report.json
    paths:
      - "*-report.*"
      - mypy-report/
    expire_in: 1 week
  coverage: '/TOTAL.*\s+(\d+%)$/'

code-quality:security:
  stage: code-quality
  needs: ["setup:metadata"]
  script:
    - pip install bandit safety semgrep
    - pip install -r requirements.txt
    
    # Safety check for known vulnerabilities
    - echo "üîí Running safety check for known vulnerabilities..."
    - safety check --json --output=safety-report.json || true
    
    # Bandit security analysis
    - echo "üîí Running bandit security analysis..."
    - bandit -r . -f json -o bandit-report.json -ll || true
    - bandit -r . -f txt -o bandit-report.txt -ll || true
    
    # Semgrep security scanning
    - echo "üîí Running Semgrep security scanning..."
    - semgrep --config=auto --json --output=semgrep-report.json . || true
  artifacts:
    reports:
      sast: semgrep-report.json
    paths:
      - "*-report.*"
    expire_in: 1 week
  allow_failure: true

# =============================================================================
# COMPREHENSIVE TESTING
# =============================================================================

test:unit:
  stage: test
  needs: ["code-quality:lint"]
  services:
    - redis:7-alpine
    - postgres:15-alpine
  variables:
    POSTGRES_DB: testdb
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: testpassword
    TEST_DATABASE_URL: postgresql://postgres:testpassword@postgres/testdb
    TEST_REDIS_URL: redis://redis:6379
  script:
    - pip install pytest pytest-cov pytest-xdist pytest-mock pytest-asyncio
    - pip install -r requirements.txt
    
    # Wait for services
    - sleep 10
    
    # Run unit tests
    - echo "üß™ Running unit tests..."
    - python -m pytest tests/unit/ 
        --cov=src 
        --cov-report=xml:coverage-unit.xml 
        --cov-report=html:htmlcov-unit 
        --cov-report=term
        --junitxml=unit-test-results.xml 
        --maxfail=5 
        -n auto 
        -v
  artifacts:
    reports:
      junit: unit-test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage-unit.xml
    paths:
      - htmlcov-unit/
      - coverage-unit.xml
    expire_in: 1 week
  coverage: '/TOTAL.*\s+(\d+%)$/'

test:integration:
  stage: test
  needs: ["code-quality:lint"]
  services:
    - redis:7-alpine
    - postgres:15-alpine
  variables:
    POSTGRES_DB: testdb
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: testpassword
    TEST_DATABASE_URL: postgresql://postgres:testpassword@postgres/testdb
    TEST_REDIS_URL: redis://redis:6379
  script:
    - pip install pytest pytest-cov pytest-asyncio
    - pip install -r requirements.txt
    
    # Wait for services
    - sleep 10
    
    # Run integration tests
    - echo "üß™ Running integration tests..."
    - python -m pytest tests/integration/ 
        --cov=src 
        --cov-report=xml:coverage-integration.xml 
        --cov-report=html:htmlcov-integration 
        --junitxml=integration-test-results.xml 
        --maxfail=3 
        -v
  artifacts:
    reports:
      junit: integration-test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage-integration.xml
    paths:
      - htmlcov-integration/
      - coverage-integration.xml
    expire_in: 1 week

test:performance:
  stage: test
  needs: ["code-quality:lint"]
  script:
    - pip install pytest-benchmark locust
    - pip install -r requirements.txt
    
    # Performance benchmarking
    - echo "üöÄ Running performance benchmarks..."
    - python -m pytest tests/performance/ 
        --benchmark-json=benchmark-results.json 
        --benchmark-histogram=benchmark-histogram
    
    # Load testing (if locustfile exists)
    - |
      if [ -f "locustfile.py" ]; then
        echo "üöÄ Running load tests..."
        locust --headless --users 100 --spawn-rate 10 --run-time 60s 
               --host http://localhost:8000 --html load-test-report.html || true
      fi
  artifacts:
    paths:
      - benchmark-results.json
      - benchmark-histogram.svg
      - load-test-report.html
    expire_in: 1 week
  allow_failure: true

# =============================================================================
# SONARQUBE ANALYSIS
# =============================================================================

sonarqube-check:
  stage: security-scan
  needs: ["test:unit"]
  image: sonarqube-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner 
        -Dsonar.projectKey=spx-options-trading-bot
        -Dsonar.sources=.
        -Dsonar.host.url=$SONAR_HOST_URL
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.python.coverage.reportPaths=coverage-unit.xml
        -Dsonar.python.xunit.reportPath=unit-test-results.xml
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
  allow_failure: true

# =============================================================================
# CONTAINER BUILD AND SECURITY SCAN
# =============================================================================

build:container:
  stage: build
  needs: ["setup:metadata", "test:unit", "test:integration"]
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $REGISTRY_URL
  script:
    # Build multi-stage Docker image
    - echo "üê≥ Building Docker image: $FULL_IMAGE_NAME"
    - |
      docker build 
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg VCS_REF=$CI_COMMIT_SHA
        --build-arg VERSION=$BUILD_VERSION
        --tag $FULL_IMAGE_NAME
        --tag $REGISTRY_URL/$IMAGE_NAME:latest
        --file Dockerfile.multi-stage
        .
    
    # Push Docker image
    - echo "üì§ Pushing Docker image..."
    - docker push $FULL_IMAGE_NAME
    - docker push $REGISTRY_URL/$IMAGE_NAME:latest

container-scan:trivy:
  stage: security-scan
  needs: ["build:container"]
  image: aquasec/trivy:latest
  script:
    # Container vulnerability scanning
    - echo "üîí Running Trivy container security scan..."
    - trivy image --format json --output trivy-report.json $FULL_IMAGE_NAME || true
    - trivy image --format table $FULL_IMAGE_NAME
    
    # Generate SBOM
    - trivy image --format spdx-json --output sbom.spdx.json $FULL_IMAGE_NAME || true
  artifacts:
    reports:
      container_scanning: trivy-report.json
    paths:
      - trivy-report.json
      - sbom.spdx.json
    expire_in: 1 week
  allow_failure: true

# =============================================================================
# DEPLOYMENT TO DEVELOPMENT
# =============================================================================

deploy:dev:
  stage: deploy-dev
  needs: ["setup:metadata", "build:container"]
  image: bitnami/kubectl:latest
  environment:
    name: development
    url: https://spx-options-dev.domain.com
  variables:
    KUBE_NAMESPACE: $DEV_NAMESPACE
  before_script:
    - kubectl config use-context $KUBE_CONTEXT
    - kubectl cluster-info
  script:
    - echo "üîÑ Deploying to development using rolling update strategy..."
    
    # Rolling update deployment
    - kubectl set image deployment/spx-options-trading-bot 
        spx-options-trading-bot=$FULL_IMAGE_NAME 
        -n $KUBE_NAMESPACE
    
    # Wait for rollout completion
    - kubectl rollout status deployment/spx-options-trading-bot 
        -n $KUBE_NAMESPACE --timeout=600s
    
    # Verify deployment
    - python scripts/deployment_verification.py 
        --environment dev --strategy rolling
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
      when: manual
  allow_failure: false

# =============================================================================
# DEPLOYMENT TO STAGING
# =============================================================================

deploy:staging:blue-green:
  stage: deploy-staging
  needs: ["setup:metadata", "build:container", "deploy:dev"]
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://spx-options-staging.domain.com
  variables:
    KUBE_NAMESPACE: $STAGING_NAMESPACE
  before_script:
    - kubectl config use-context $KUBE_CONTEXT
    - apt-get update && apt-get install -y python3 python3-pip
  script:
    - echo "üîµüü¢ Deploying to staging using blue-green strategy..."
    
    # Deploy to blue environment
    - envsubst < k8s/staging/deployment-blue.yaml | kubectl apply -f -
    - kubectl set image deployment/spx-options-trading-bot-blue 
        spx-options-trading-bot=$FULL_IMAGE_NAME 
        -n $KUBE_NAMESPACE
    
    # Wait for blue deployment
    - kubectl rollout status deployment/spx-options-trading-bot-blue 
        -n $KUBE_NAMESPACE --timeout=600s
    
    # Comprehensive health check on blue environment
    - python3 scripts/health_checker.py 
        --environment staging-blue 
        --timeout 300 
        --retry-count 5 
        --comprehensive-check
    
    # Warm up blue environment
    - python3 scripts/warm_up_environment.py 
        --environment staging-blue --duration 120
    
    # Switch traffic to blue
    - kubectl apply -f k8s/staging/service-blue-main.yaml
    - kubectl apply -f k8s/staging/ingress-blue.yaml
    
    # Monitor stability for 2 minutes
    - sleep 120
    - python3 scripts/monitor_deployment.py 
        --environment staging --duration 120
    
    # Cleanup old green deployment
    - kubectl delete deployment spx-options-trading-bot-green 
        -n $KUBE_NAMESPACE --ignore-not-found=true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual
  allow_failure: false

# =============================================================================
# DEPLOYMENT TO PRODUCTION
# =============================================================================

deploy:production:canary:
  stage: deploy-production
  needs: ["setup:metadata", "build:container", "deploy:staging:blue-green"]
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://spx-options-production.domain.com
    deployment_tier: production
  variables:
    KUBE_NAMESPACE: $PROD_NAMESPACE
  before_script:
    - kubectl config use-context $KUBE_CONTEXT
    - apt-get update && apt-get install -y python3 python3-pip
  script:
    - echo "üê§ Deploying to production using canary strategy..."
    
    # Pre-production deployment checks
    - python3 scripts/pre_deployment_checks.py 
        --check-market-hours 
        --check-trading-volume 
        --check-system-load 
        --abort-on-high-volatility
    
    # Canary deployment phases
    - |
      PERCENTAGES=(10 25 50 100)
      
      for PERCENTAGE in "${PERCENTAGES[@]}"; do
        echo "üìä Deploying canary with ${PERCENTAGE}% traffic..."
        
        # Deploy canary version
        envsubst < k8s/prod/deployment-canary.yaml | kubectl apply -f -
        kubectl set image deployment/spx-options-trading-bot-canary 
          spx-options-trading-bot=$FULL_IMAGE_NAME 
          -n $KUBE_NAMESPACE
        
        # Update Istio virtual service for traffic splitting
        envsubst < k8s/prod/istio-virtual-service-template.yaml | 
          sed "s/CANARY_PERCENTAGE/${PERCENTAGE}/g" | 
          kubectl apply -f -
        
        # Monitor canary deployment
        MONITOR_DURATION=$((PERCENTAGE < 100 ? 600 : 300))
        python3 scripts/canary_monitor.py 
          --traffic-percentage $PERCENTAGE 
          --duration $MONITOR_DURATION 
          --error-threshold 0.01 
          --latency-threshold-p99 500 
          --business-metrics-check 
          --rollback-on-failure
        
        # Wait for approval before next phase (except final)
        if [[ $PERCENTAGE -lt 100 ]]; then
          echo "‚è≥ Canary at ${PERCENTAGE}% is stable. Proceeding to next phase in 60 seconds..."
          sleep 60
        fi
      done
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  timeout: 2h
  allow_failure: false

# =============================================================================
# POST-DEPLOYMENT VALIDATION
# =============================================================================

post-validation:e2e:
  stage: post-validation
  needs: ["deploy:production:canary"]
  image: python:$PYTHON_VERSION
  variables:
    BASE_URL: https://spx-options-production.domain.com
  script:
    - pip install pytest selenium requests pytest-html
    
    # End-to-end tests
    - echo "üß™ Running end-to-end tests..."
    - python -m pytest tests/e2e/ 
        --html=e2e-report.html 
        --self-contained-html 
        --maxfail=3 
        -v
  artifacts:
    paths:
      - e2e-report.html
    reports:
      junit: e2e-results.xml
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

post-validation:performance:
  stage: post-validation
  needs: ["deploy:production:canary"]
  script:
    - pip install requests numpy matplotlib
    
    # Performance validation
    - echo "üöÄ Running performance validation..."
    - python scripts/performance_validation.py 
        --environment production 
        --duration 300 
        --requests-per-second 100 
        --latency-threshold 200ms 
        --error-threshold 0.01 
        --generate-report
  artifacts:
    paths:
      - performance-validation-report.html
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

post-validation:security:
  stage: post-validation
  needs: ["deploy:production:canary"]
  script:
    - pip install requests python-owasp-zap-v2.4
    
    # Security validation
    - echo "üîí Running security validation..."
    - python scripts/security_validation.py 
        --target-url https://spx-options-production.domain.com 
        --scan-type quick 
        --check-ssl 
        --check-headers 
        --generate-report
  artifacts:
    paths:
      - security-validation-report.html
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  allow_failure: true

# =============================================================================
# FEATURE FLAG MANAGEMENT
# =============================================================================

feature-flags:production:
  stage: post-validation
  needs: ["deploy:production:canary"]
  variables:
    FEATURE_FLAG_API_KEY: $FEATURE_FLAG_API_KEY
  script:
    - pip install requests python-json-logger
    
    # Gradual feature flag rollout for production
    - echo "üö© Managing production feature flags..."
    
    # Phase 1: 10% rollout
    - python scripts/feature_flag_manager.py 
        --environment production 
        --action gradual-enable 
        --flags advanced-risk-management,ml-predictions 
        --rollout-percentage 10 
        --monitor-duration 600
    
    # Phase 2: 50% rollout
    - python scripts/feature_flag_manager.py 
        --environment production 
        --action increase-rollout 
        --flags advanced-risk-management,ml-predictions 
        --rollout-percentage 50 
        --monitor-duration 900
    
    # Phase 3: 100% rollout
    - python scripts/feature_flag_manager.py 
        --environment production 
        --action complete-rollout 
        --flags advanced-risk-management,ml-predictions
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  allow_failure: true

# =============================================================================
# MONITORING AND ALERTING UPDATE
# =============================================================================

monitoring:update:
  stage: monitoring-update
  needs: ["post-validation:e2e", "post-validation:performance"]
  variables:
    GRAFANA_API_KEY: $GRAFANA_API_KEY
    GRAFANA_URL: $GRAFANA_URL
    PROMETHEUS_URL: $PROMETHEUS_URL
  script:
    - pip install requests grafana-api prometheus-api-client
    
    # Update Grafana dashboards
    - echo "üìä Updating monitoring dashboards..."
    - python scripts/update_monitoring.py 
        --version $BUILD_VERSION 
        --environment production 
        --update-grafana-dashboards 
        --update-prometheus-rules 
        --create-baseline-metrics
    
    # Update alerting rules
    - echo "üö® Updating alerting rules..."
    - python scripts/update_alerting_rules.py 
        --environment production 
        --version $BUILD_VERSION
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  allow_failure: true

# =============================================================================
# CHAOS ENGINEERING (PRODUCTION ONLY)
# =============================================================================

chaos-engineering:
  stage: chaos-engineering
  needs: ["post-validation:e2e"]
  image: bitnami/kubectl:latest
  environment:
    name: production-chaos
    action: verify
  variables:
    KUBE_NAMESPACE: $PROD_NAMESPACE
  before_script:
    - kubectl config use-context $KUBE_CONTEXT
    - apt-get update && apt-get install -y python3 python3-pip
  script:
    - echo "üå™Ô∏è Running controlled chaos engineering experiments..."
    
    # Pod failure experiment
    - python3 scripts/chaos_experiments.py 
        --experiment pod-failure 
        --namespace $KUBE_NAMESPACE 
        --duration 300 
        --safety-checks-enabled 
        --auto-recovery
    
    # Network latency experiment
    - python3 scripts/chaos_experiments.py 
        --experiment network-latency 
        --namespace $KUBE_NAMESPACE 
        --duration 300 
        --latency 100ms 
        --safety-checks-enabled
    
    # CPU stress test
    - python3 scripts/chaos_experiments.py 
        --experiment cpu-stress 
        --namespace $KUBE_NAMESPACE 
        --duration 180 
        --cpu-load 70 
        --safety-checks-enabled
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_PIPELINE_ID =~ /.*0$/  # Run every 10th pipeline
  timeout: 30m
  allow_failure: true

# =============================================================================
# NOTIFICATIONS
# =============================================================================

notification:success:
  stage: notification
  needs: 
    - job: "deploy:production:canary"
      optional: true
    - job: "post-validation:e2e"
      optional: true
    - job: "monitoring:update"
      optional: true
  image: alpine:latest
  before_script:
    - apk add --no-cache curl python3 py3-pip
    - pip3 install requests
  script:
    - |
      if [[ "$CI_JOB_STATUS" == "success" ]]; then
        STATUS="success"
        COLOR="good"
        MESSAGE="üöÄ Deployment completed successfully"
      else
        STATUS="partial"
        COLOR="warning"
        MESSAGE="‚ö†Ô∏è Deployment completed with warnings"
      fi
      
      # Send Slack notification
      python3 scripts/send_slack_notification.py 
        --status "$STATUS" 
        --message "$MESSAGE" 
        --version "$BUILD_VERSION" 
        --environment "$TARGET_ENV"
      
      # Send Teams notification
      python3 scripts/send_teams_notification.py 
        --status "$STATUS" 
        --message "$MESSAGE" 
        --version "$BUILD_VERSION" 
        --environment "$TARGET_ENV"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
  allow_failure: true

# =============================================================================
# ROLLBACK ON FAILURE
# =============================================================================

rollback:emergency:
  stage: rollback
  needs: 
    - job: "deploy:production:canary"
      artifacts: false
    - job: "post-validation:e2e"
      artifacts: false
  image: bitnami/kubectl:latest
  environment:
    name: production-emergency
    action: rollback
  variables:
    KUBE_NAMESPACE: $PROD_NAMESPACE
    FEATURE_FLAG_API_KEY: $FEATURE_FLAG_API_KEY
  before_script:
    - kubectl config use-context $KUBE_CONTEXT
    - apt-get update && apt-get install -y python3 python3-pip
  script:
    - echo "üö® Executing emergency rollback..."
    
    # Rollback Kubernetes deployment
    - kubectl rollout undo deployment/spx-options-trading-bot 
        -n $KUBE_NAMESPACE
    
    # Wait for rollback completion
    - kubectl rollout status deployment/spx-options-trading-bot 
        -n $KUBE_NAMESPACE --timeout=300s
    
    # Disable all new features immediately
    - python3 scripts/feature_flag_manager.py 
        --environment production 
        --action emergency-disable 
        --flags advanced-risk-management,ml-predictions,advanced-algorithms
    
    # Send critical alerts
    - python3 scripts/alert_manager.py 
        --severity critical 
        --message "Production rollback executed for pipeline $CI_PIPELINE_ID" 
        --notify-oncall 
        --create-incident 
        --page-sre-team
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_failure
  timeout: 10m

# =============================================================================
# WORKFLOW RULES AND CONDITIONS
# =============================================================================

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

# =============================================================================
# RESOURCE GROUPS FOR PARALLEL EXECUTION
# =============================================================================

# Limit concurrent deployments
deploy:dev:
  resource_group: deploy-dev

deploy:staging:blue-green:
  resource_group: deploy-staging

deploy:production:canary:
  resource_group: deploy-production

rollback:emergency:
  resource_group: deploy-production
